---
title: Design Overview
layout: default
tagline: Hooray for OmniGraffle!
index: 3
filters:
  - erb
  - links
  - examples
  - api
  - textile
---

h1. <%= page.config['title'] %>

<div id="auto-toc"></div>

h2. Redleaf Library Classes

The Redleaf classes follow the basic design of the Redland library, from which it derives most of its underlying functionality, with a few changes.

!images/redland-classes.png(Redland Classes)!

h3. Nodes

The biggest change is that Redleaf is written with the idea that you will want to store regular Ruby objects in the Graph, not instances of a specialized "node" type that you have to wrap around every object before putting it in the graph.

To facilitate this, Redleaf provides a mapping of some of the more common Ruby classes to types in the "XML Schema namespace":http://www.w3.org/2001/XMLSchema, and a way to extend the conversion system with your own datatypes.

This is covered in greater detail in the <?link "Node Type System":tour/nodetypesystem.page ?> section.

h3. Blank Nodes

In Redleaf, Symbols are translated into blank nodes; if you pass a symbol as the subject or object of a triple, it will be converted to the equivalent blank node on the backend, and then mapped to the appropriate Symbol when it comes back out:


h3. Other Changes

Beyond that, the changes are pretty minor:

* The Redland @Storage@ class is called <?api Redleaf::Store ?>
* The Redland @Model@ class is called <?api Redleaf::Graph ?>
* The Redland @Serializer@ and @Query@ classes don't have a corollary in Redleaf; they are
  used behind the scenes.

!images/design-overview.png(Design Overview)!

h3. Ruby Idiom

I've tried to make the library easy to use for people who just want to start playing with triples, but also expose as much of Redland's power as possible for people who are more familiar with it. There's still a ways to go in both regards; suggestions for improvement are welcomed!


