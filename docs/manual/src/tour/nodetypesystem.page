---
title: The Node Type System
layout: default
index: 3
filters:
  - erb
  - links
  - examples
  - editorial
  - api
  - textile
example_prelude: |-
  require 'redleaf'
---

h2. <%= page.config['title'] %>

As mentioned in the <?link "Design Overview":design.page ?>, Redleaf is intended to be used naturally from within Ruby, and to do so provides conversion of regular Ruby objects to equivalent nodes in RDF and vice-versa. This type system is extensible, meaning you can add translations for your own object classes. You just need to tell Redleaf how to convert an object of that type to its "canonical representation":http://www.w3.org/TR/xmlschema11-2/#dt-lexical-mapping as a typed literal and back again.

For instance, if you wanted to store @IPAddr@ objects in the graph, and wanted them to map back to @IPAddr@ instances when they came back into Ruby:

<?example { language: ruby, caption: "Declare a custom mapping for <code>IPAddr</code> objects", testable: true } ?>
require 'ipaddr'

# There's almost certainly an actual URI for IP addresses, but I 
# can't find it
ipuri = 'http://www.iana.org/numbers/ipaddr'

# Make IPAddr objects representable as typed literals (ignoring for 
# the moment the fact that #family is a platform-dependent value)
Redleaf::NodeUtils.register_new_class( IPAddr, ipuri ) do |addr|
	af = case addr.family
	     when Socket::AF_INET then "ipv4"
	     when Socket::AF_INET6 then "ipv6"
	     else "unknown" end
	ip = a.to_string
	
	# Regretably the only way to actually get the mask_addr as a string
	mask = a.send( :_to_string, a.instance_variable_get(:@mask_addr) )

	return "%s:%s/%s" % [ af, ip, mask ]
end

# Make literal nodes in the graph with the type 'http://www.iana.org/numbers/ipaddr'
# generate the equivalent Ruby object when fetched from the graph
Redleaf::NodeUtils.register_new_type( ipuri ) do |literal_string|
	IPAddr.new( literal_string )
end

addr = IPAddr.new( '192.168.16.96/27' )   # =>

# Make a tuple that contains the typed literal's type URI and its 
# canonical representation
literal = Redleaf::NodeUtils.make_object_typed_literal( addr )
# =>

# Now translate that tuple back to a Ruby object
obj = Redleaf::NodeUtils.make_typed_literal_object( *literal )
# =>
<?end ?>

This assumes that each employee's @name@ attribute is unique, but you can use anything you like as the string representation in the graph, <?ed verify:"as long as it is canonical" ?>.

