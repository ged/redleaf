#!rake

SPEC_DATADIR     = SPECDIR + 'data'
SPEC_TEMPLATEDIR = SPECDIR + 'templates'

W3CTEST_TASKLIB  = SPECDIR + 'w3ctest-tasks.rb'
RDFATEST_TASKLIB = SPECDIR + 'rdfatest-tasks.rb'

# Load the W3C test rake tasks
trace "Adding tasks from #{W3CTEST_TASKLIB}"
load W3CTEST_TASKLIB
trace "Adding tasks from #{RDFATEST_TASKLIB}"
load RDFATEST_TASKLIB


desc "Build the W3C conformance test suite"
task :build_specs => 'w3ctests:generate'

desc "Build the W3C RDFa test suite"
task :build_specs => 'rdfatests:generate'

# C extension constants
EXT_MAKEFILE  = EXTDIR + 'Makefile'
EXT_SOURCES   = FileList[ EXTDIR + '*.c' ]
EXT_SO        = EXTDIR + "redleaf_ext.#{CONFIG['DLEXT']}"


#####################################################################
###	T A S K S
#####################################################################

# Make both the default task and the spec task depend on building the extension
task :local => :build
task :spec => :build
namespace :spec do
	task :doc   => [ :build ]
	task :quiet => [ :build ]
	task :html  => [ :build ]
	task :text  => [ :build ]

	desc "Run specs under gdb"
	task :gdb do |task|
		require 'tempfile'

	    cmd_parts = ['run']
	    cmd_parts << '-Ilib:ext'
	    cmd_parts << '/usr/bin/spec'
	    cmd_parts += SPEC_FILES.collect { |fn| %["#{fn}"] }
	    cmd_parts += COMMON_SPEC_OPTS

		script = Tempfile.new( 'spec-gdbscript' )
		script.puts( cmd_parts.join(' ') )
		script.flush

		run 'gdb', '-x', script.path, RUBY
	end
end

# Nasty, I know, but I can't find any builtin way to prepend a prerequisite
#Rake::Task[ 'manual:build' ].prerequisites.unshift( 'rake:build' )


desc "Make the Makefile for the C extension"
file EXT_MAKEFILE.to_s => EXT_SOURCES do
	log "Configuring Redleaf C extension"
	in_subdirectory( EXTDIR ) do
		ruby 'extconf.rb'
	end
end
CLOBBER.include( EXTDIR + 'mkmf.log', EXTDIR + 'conftest.dSYM', EXT_SO )

desc "Build the C extension"
task :build => EXT_SO
file EXT_SO => [ EXT_MAKEFILE.to_s, *EXT_SOURCES ] do
	in_subdirectory( EXTDIR ) do
		sh 'make'
	end
end


desc "Rebuild the C extension"
task :rebuild => [ :clean, :build ]


task :clean do
	if EXT_MAKEFILE.exist?
		in_subdirectory( EXTDIR ) do
			sh 'make clean'
		end
	end
end	

task :clobber do
	if EXT_MAKEFILE.exist?
		in_subdirectory( EXTDIR ) do
			sh 'make distclean'
		end
	end
end	
CLOBBER.include( EXT_MAKEFILE )

