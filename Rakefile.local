#!rake

begin
	require 'mkrf'
rescue LoadError => err
	unless Object.const_defined?( :Gem )
		require 'rubygems'
		retry
	end
	
	fail "You need to have the mkrf library installed to build this."
end


# C extension constants
EXT_RAKEFILE  = EXTDIR + 'Rakefile'
EXT_SO        = EXTDIR + "redleaf_ext.#{CONFIG['DLEXT']}"

ADDITIONAL_INCLUDE_DIRS = %w[
	/usr/local/include
	/opt/include
	/opt/local/include
]

# Additional (auto-generated) spec constants
SPEC_RAKEFILE = SPECDIR + 'Rakefile'


#####################################################################
###	T A S K S
#####################################################################

# task :local => [ :build, :build_specs ]
task :local => [ :build ]
task :spec => [ :build ]
namespace :spec do
	task :quiet => [ :build ]
	task :html => [ :build ]
	task :text => [ :build ]
end
	

task :debug do
	$DEBUG = true
end

desc "Make the Rakefile for the C extension"
file EXT_RAKEFILE.to_s => FileList[ 'Rakefile', EXTDIR + '*.c' ] do
	require 'misc/monkeypatches' # Fix Mkrf's output and some other stuff
	
	log "Configuring redleaf C extension"
	Dir.chdir( EXTDIR ) do
		Mkrf::Generator.new( 'redleaf_ext', FileList['*.c'] ) do |gen|
			trace "Setting CFLAGS"
			gen.cflags << ' -Wall'
			gen.cflags << ' -ggdb'
			gen.cflags << ' -DDEBUG'

			%w[redland.h raptor.h rasqal.h].each do |header|
				trace "Checking for #{header}"
				gen.include_header( header, *ADDITIONAL_INCLUDE_DIRS ) or
					fail( "Could not find #{header} header file" )
			end

			trace "Checking for librdf_new_world()"
			gen.include_library( "rdf", "librdf_new_world" ) or
				fail( "Could not find Redland RDF library (http://librdf.org/)." )

			gen.has_function?( "librdf_parser_guess_name " ) or
				fail( "No librdf_parser_guess_name ()" )

		end
	end
end
CLOBBER.include( EXTDIR + 'mkrf.log' )


desc "Build the C extension"
task :build => EXT_RAKEFILE.to_s do
	Dir.chdir( EXTDIR ) do
		sh 'rake'
	end
end


desc "Build the W3C conformance test suite"
task :build_specs => SPEC_RAKEFILE.to_s do
	Dir.chdir( SPECDIR ) do
		sh 'rake', '-t'
	end
end


task :clean do
	if EXT_RAKEFILE.exist?
		Dir.chdir( EXTDIR ) do
			sh 'rake', 'clean'
		end
	end
	Dir.chdir( SPECDIR ) do
		sh 'rake', 'clean'
	end
end	

task :clobber do
	if EXT_RAKEFILE.exist?
		Dir.chdir( EXTDIR ) do
			sh 'rake', 'clobber'
		end
	end
	Dir.chdir( SPECDIR ) do
		sh 'rake', 'clobber'
	end
end	
CLOBBER.include( EXT_RAKEFILE )

