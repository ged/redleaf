#!/usr/bin/env ruby

BEGIN {
	require 'pathname'
	basedir = Pathname.new( __FILE__ ).dirname.parent.parent

	libdir = basedir + "lib"

	$LOAD_PATH.unshift( libdir ) unless $LOAD_PATH.include?( libdir )
}

begin
	require 'spec/runner'
	require 'redleaf'
rescue LoadError
	unless Object.const_defined?( :Gem )
		require 'rubygems'
		retry
	end
	raise
end



#####################################################################
###	C O N T E X T S
#####################################################################
describe Redleaf::Parser do

	BASE_URI = 'http://www.w3.org/2000/10/rdf-tests/rdfcore/testSchema#'

	before( :all ) do
		@specdir = Pathname.new( __FILE__ ).expand_path.dirname.relative_path_from( Pathname.getwd )
		@datadir = @specdir + 'data'
	end
	
	before( :each ) do
		@parser = Redleaf::Parser.new
		pending "completion of enough of the class library to test"
	end
	

<% examples.flatten.each do |example| %>
<% example.description.each_line do |descline| %>
	# <%= descline.strip.chomp %>
<% end %>
<% if example.is_negative_test? %>
	it "correctly holds the document '<%= example.input_doc %>' to be in error" do
 		model = Redleaf::Model.new
		lambda {
			model.parse( @datadir + '<%= example.input_doc %>' )
		}.should raise_error( Redleaf::ParseError, /incorrect/ )
	end
<% else %>
	it "correctly parses the document '<%= example.input_doc %>'" do
 		input_model = Redleaf::Model.new
		expected_model = Redleaf::Model.new
		
		input_model.parse( @datadir + '<%= example.input_doc %>' )
		expected_model.parse( @datadir + '<%= example.output_doc %>' )

		input_model.should === expected_model
	end
<% end %>

<% end %>

end

# vim: set nosta noet ts=4 sw=4:
